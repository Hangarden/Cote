# 어느 날, 타노스는 0과 1로 이루어진 문자열
# $S$를 보았다. 신기하게도,
# $S$가 포함하는 0의 개수와
# $S$가 포함하는 1의 개수는 모두 짝수라고 한다.
#
# 갑자기 심술이 난 타노스는
# $S$를 구성하는 문자 중 절반의 0과 절반의 1을 제거하여 새로운 문자열
# $S'$를 만들고자 한다.
# $S'$로 가능한 문자열 중 사전순으로 가장 빠른 것을 구하시오.




# # S문자열을 입력받습니다.
# S = input()
# # S문자열을 나눕니다
#     # 절반을 나눕니다. 단 S문자열에는 1과 0이 1:1비율입니다.
#     # 카운트해서 0의 갯수 / 2 1의 갯수 / 2 를해야하나?
# x = int(S.count('0')/2)
# y = int(S.count('1')/2)
# #x, y에 0과 1의 갯수가 저장되었습니다
#
# #이제 갯수만큼 리스트를 재 배열해야 겠죠.
# Sp = ""
# if (x > 1 and y > 1):
#     Sp = Sp + ("0" * x) + ("1" * y)
#     print(Sp)
# else:
#     print(S)
# while (x == 0 and y == 0):
#     print(x)
#     while x ==0:
#         Sp = Sp + 0
#         print(Sp)
#         x -= 1
#     while y ==0:
#         Sp = Sp + 1
#         print(Sp)
#         y -= 1
# print(Sp)

# 나눈 숫자를 조합하여 0을 가장 앞에 배치하고 1을 가장 뒤에 배치합니다.

def solution():
    n = list(input())
    zero = n.count('0') // 2
    one = n.count('1') // 2

    for _ in range(zero):
        n = n[::-1]#0이 앞으로 가야하기 때문에 거꾸로 돌림
        n.remove('0') # 이제 앞에 0의 값들을 소거함 (뒷자리 0부터 소거해야하기 때문, remove는 앞자리 0부터 소거함)
        n = n[::-1] #다시 돌려넣음
    for _ in range(one):
        n.remove('1') #1은 뒤로 가야하기 때문에 그냥 리무브 때림

    print(''.join(n))


solution()
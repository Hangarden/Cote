# 요세푸스 문제는 다음과 같다.
#
# 1번부터 N번까지 N명의 사람이 원을 이루면서 앉아있고, 양의 정수 K(≤ N)가 주어진다.
# 이제 순서대로 K번째 사람을 제거한다.
# 한 사람이 제거되면 남은 사람들로 이루어진 원을 따라 이 과정을 계속해 나간다.
# 이 과정은 N명의 사람이 모두 제거될 때까지 계속된다.
# 원에서 사람들이 제거되는 순서를 (N, K)-요세푸스 순열이라고 한다. 예를 들어 (7, 3)-요세푸스 순열은 <3, 6, 2, 7, 5, 1, 4>이다.
#
# N과 K가 주어지면 (N, K)-요세푸스 순열을 구하는 프로그램을 작성하시오.

# 첫째 줄에 N과 K가 빈 칸을 사이에 두고 순서대로 주어진다. (1 ≤ K ≤ N ≤ 5,000) 제곱 복잡도까지는 가능하겠구나

# 두가지 숫자를 입력받는다 한개는 1부터 N까지 숫자를 입력받고 다음은 순서 K를 입력받는다.
N, K = map(int, input().split())
# 1부터 N까지 숫자 리스트를 생성한다
A = range(1,N+1)
# 요세푸스 함수를 작성한다. 리스트와 순서 K를 입력받는다
def Yosepus(A, K):
    # 저장할 리스트가 필요하다
    result = []
    pointer = 0
    N = 7

    # 리스트가 빌 때까지 반복한다.
    while A:
        # 포인터를 이동시켜야 한다.
        pointer = (pointer + 3)%N
        # k번째 순서의 인덱스를 pop한 뒤 리스트에 저장한다.
        result.append(A.pop(pointer - 1))
        # 이후에는 포인터 다음 인덱스 부터 pop시킨다.
        print(result)
        #인덱스를 하나를 줄여야 한다.
        N -= 1



# 만일 마지막 인덱스까지 넘어갔다면 다시 처음 인덱스로 넘어간다.


1,2,3,4,5,6,7

1,2,4,5,6,7     3
1,2,4,5,7       6
1,4,5,7         2
1,4,5           7
1,4             5
4               1
                4
